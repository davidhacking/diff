package com.neusoft.modules.infomt.web;

import com.google.common.collect.Lists;
import com.neusoft.common.config.Global;
import com.neusoft.common.persistence.Page;
import com.neusoft.common.utils.ResponseJson;
import com.neusoft.common.utils.SessionUtil;
import com.neusoft.common.utils.StringUtils;
import com.neusoft.common.web.BaseController;
import com.neusoft.modules.act.entity.Act;
import com.neusoft.modules.act.service.ActProcessService;
import com.neusoft.modules.act.service.ActTaskService;
import com.neusoft.modules.act.utils.ActUtils;
import com.neusoft.modules.cmmt.entity.CurrickumClassify;
import com.neusoft.modules.cmmt.entity.CurrickumClassifyType;
import com.neusoft.modules.cmmt.entity.Curriculum;
import com.neusoft.modules.cmmt.service.CurriculumService;
import com.neusoft.modules.cms.entity.Category;
import com.neusoft.modules.cms.entity.Site;
import com.neusoft.modules.cms.service.CategoryService;
import com.neusoft.modules.cms.service.SiteService;
import com.neusoft.modules.cms.utils.CmsUtils;
import com.neusoft.modules.cms.utils.ItembankUtils;
import com.neusoft.modules.ftpfile.entity.FtpFile;
import com.neusoft.modules.ftpfile.service.FtpFileService;
import com.neusoft.modules.infomt.entity.Credential;
import com.neusoft.modules.infomt.entity.CredentialRecords;
import com.neusoft.modules.infomt.entity.CurriculumClassInfo;
import com.neusoft.modules.infomt.entity.Signupcourseinfo;
import com.neusoft.modules.infomt.service.CredentialRecordsService;
import com.neusoft.modules.infomt.service.CredentialService;
import com.neusoft.modules.infomt.service.CurriculumClassInfoService;
import com.neusoft.modules.infomt.service.SignupcourseinfoService;
import com.neusoft.modules.itembank.entity.Exam;
import com.neusoft.modules.itembank.entity.Paper;
import com.neusoft.modules.itembank.entity.PaperRecord;
import com.neusoft.modules.itembank.service.ExamService;
import com.neusoft.modules.itembank.service.PaperRecordService;
import com.neusoft.modules.itembank.service.PaperService;
import com.neusoft.modules.sys.entity.User;
import com.neusoft.modules.sys.utils.UserUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * @Description 安全教育FrontController
 * @author xujinlong
 * @date 2015年7月9日 上午10:44:20
 * @version
 */
@Controller
@RequestMapping(value = "${adminPath}/infomt")
public class BackEndItembankController extends BaseController {

	@Autowired
	private CategoryService categoryService;

	@Autowired
	private CurriculumService curriculumService;

	@Autowired
	private SiteService siteService;

	@Autowired
	private PaperService paperService;

	@Autowired
	private PaperRecordService paperRecordService;

	@Autowired
	private ExamService examService;

	@Autowired
	private CurriculumClassInfoService curriculumClassInfoService;

	@Autowired
	private CredentialRecordsService credentialRecordsService;

	@Autowired
	private CredentialService credentialService;

	@Autowired
	private SignupcourseinfoService signupcourseinfoService;

	@Autowired
	private FtpFileService ftpfileService;

	@Autowired
	private ActTaskService actTaskService;

	@Autowired
	private ActProcessService actProcessService;

	/**
	 * 课程列表
	 */
	@RequestMapping(value = "list-topic-{categoryId}${urlSuffix}")
	public String listTopic(@PathVariable String categoryId,
			@RequestParam(required = false, defaultValue = "") String typeid,
			@RequestParam(required = false, defaultValue = "") String studyStatus,
			@RequestParam(required = false, defaultValue = "1") Integer pageNo,
			@RequestParam(required = false, defaultValue = "10") Integer pageSize, Model model) {
		// User user = UserUtils.getUser();
		Category category = categoryService.get(categoryId);
		if (category == null) {
			Site site = CmsUtils.getSite(Site.defaultSiteId());
			model.addAttribute("site", site);
			return "error/404";
		}
		Site site = siteService.get(category.getSite().getId());
		model.addAttribute("site", site);
		model.addAttribute("category", category);
		List<CurrickumClassify> list = ItembankUtils.getCurrickumClassifyList("");
		String description1 = "";
		String description2 = "";
		String description3 = "";
		if (!typeid.equals("")) {
			for (CurrickumClassify item : list) {
				if (item.getId().equals(typeid)) {
					description1 = item.getDescription1();
					description2 = item.getDescription2();
					description3 = item.getDescription3();
					break;
				}
			}
		}

		List<CurrickumClassifyType> currickum_classify_type_num_list = ItembankUtils.getCurrickumClassifyTypeNumMap();
		Map<String, String> currickumClassifyType_map = new HashMap<String, String>();

		for (CurrickumClassifyType item : currickum_classify_type_num_list) {
			currickumClassifyType_map.put(item.getType(), item.getCountType());
		}
		model.addAttribute("list", list);
		model.addAttribute("currickumClassifyType_map", currickumClassifyType_map);
		model.addAttribute("typeid", typeid);
		Page<Curriculum> page = ItembankUtils.getCurriculumList(typeid, new Page<Curriculum>(pageNo, pageSize),
				new Curriculum());
		// 添加学习状态
		// 记录未学习数量
		int haventStudied = 0;
		// 记录学习中数量
		int studying = 0;
		// 记录已学习数量
		int haveStudied = 0;
		// 证书数量
		int hasCredential = 0;
		for (int i = 0; i < page.getList().size(); i++) {
			Curriculum c = curriculumService.get(page.getList().get(i).getId());
			if (c.getAnnexFtpFileList() != null) {
				int total = c.getAnnexFtpFileList().size();
				String count_str = curriculumService.getCountCurriculumClassInfoByUserIdCurriculumId(
						UserUtils.getUser().getId(), page.getList().get(i).getId());
				if (Integer.parseInt(count_str) == 0) {
					System.out.println("未学习");
					page.getList().get(i).setStudyStatus("未学习");
					haventStudied++;
				} else if (Integer.parseInt(count_str) < total) {
					page.getList().get(i).setStudyStatus("学习中");
					studying++;
				} else {
					page.getList().get(i).setStudyStatus("已学习");
					haveStudied++;
				}
				int countCredential = Integer.parseInt(credentialService.getCountCredentialRecordByUserIdCurriculumId(
						UserUtils.getUser().getId(), page.getList().get(i).getId()));
				System.out.println("UserUtils.getUser().getId(), page.getList().get(i).getId(): "
						+ UserUtils.getUser().getId() + ", " + page.getList().get(i).getId());
				System.out.println("countCredential: " + countCredential);
				if (countCredential >= 1) {
					System.out.println("证书");
					page.getList().get(i).setCredentialStatus("证书");
					hasCredential++;
				}
				List<Credential> credential_list = credentialService
						.getCredentialIdByCurriculumId(page.getList().get(i).getId());
				if (credential_list.size() > 0) {
					page.getList().get(i).setCredentialId(credential_list.get(0).getId());
				}
			} else {
				page.getList().get(i).setStudyStatus("未学习");
			}
		}

		model.addAttribute("haventStudied", haventStudied);
		model.addAttribute("studying", studying);
		model.addAttribute("haveStudied", haveStudied);
		model.addAttribute("hasCredential", hasCredential);

		if (studyStatus != null && !studyStatus.equals("")) {
			if (studyStatus.equals("haventStudied")) {
				studyStatus = "未学习";
			} else if (studyStatus.equals("studying")) {
				studyStatus = "学习中";
			} else if (studyStatus.equals("haveStudied")) {
				studyStatus = "已学习";
			} else if (studyStatus.equals("hasCredential")) {
				studyStatus = "证书";
			}
			List<Curriculum> curriculum_list = Lists.newArrayList();
			for (int i = 0; i < page.getList().size(); i++) {
				if (page.getList().get(i).getStudyStatus() != null
						&& page.getList().get(i).getStudyStatus().equals(studyStatus)) {
					curriculum_list.add(page.getList().get(i));
				}
				if (page.getList().get(i).getCredentialStatus() != null
						&& page.getList().get(i).getCredentialStatus().equals(studyStatus)) {
					curriculum_list.add(page.getList().get(i));
				}
			}
			page.setList(curriculum_list);
			page = new Page<Curriculum>(pageNo, pageSize, curriculum_list.size(), curriculum_list);
			page.initialize();
		}

		model.addAttribute("description1", description1);
		model.addAttribute("description2", description2);
		model.addAttribute("description3", description3);
		model.addAttribute("page", page);
		// model.addAttribute("user",
		// JsonMapper.toJsonString(ResponseJson.Builder(user)));

		return "modules/infomt/moduleItembank/frontTopic";
	}

	/**
	 * 课程列表new
	 */
	@RequestMapping(value = "courseList")
	public String listCourseList(@RequestParam(required = false, defaultValue = "") String typeid,
			@RequestParam(required = false, defaultValue = "") String studyStatus,
			@RequestParam(required = false, defaultValue = "") String courseNameQuery,
			@RequestParam(required = false, defaultValue = "1") Integer pageNo,
			@RequestParam(required = false, defaultValue = "100") Integer pageSize, HttpServletRequest request,
			HttpServletResponse response, Model model) {
		Boolean isMobile = UserUtils.getPrincipal().isMobileLogin();

		// Added by HongYang @ 20161123
		HashMap<String,Object> map = new HashMap<String,Object>();


		int courseNum = 0;
		Curriculum courseQuery = new Curriculum();
		courseQuery.setName(courseNameQuery);
		model.addAttribute("courseNameQuery", courseNameQuery);
		Page<Curriculum> page = ItembankUtils.getCurriculumList(typeid, new Page<Curriculum>(pageNo, pageSize),
				courseQuery);
		// 添加学习状态
		// 记录未学习数量
		int haventStudied = 0;
		// 记录学习中数量
		int studying = 0;
		// 记录已学习数量
		int haveStudied = 0;
		// 证书数量
		int hasCredential = 0;
		for (int i = 0; i < page.getList().size(); i++) {
			System.out.println("统计第" + i + "题");
			System.out.println("haventStudied: " + haventStudied);
			System.out.println("studying: " + studying);
			System.out.println("haveStudied: " + haveStudied);
			Curriculum c = curriculumService.get(page.getList().get(i).getId());
			if (c.getAnnexFtpFileList() != null) {
				int total = c.getAnnexFtpFileList().size();
				String count_str = curriculumService.getCountCurriculumClassInfoByUserIdCurriculumId(
						UserUtils.getUser().getId(), page.getList().get(i).getId());
				if (Integer.parseInt(count_str) == 0) {
					System.out.println("未学习");
					page.getList().get(i).setStudyStatus("未学习");
					haventStudied++;
				} else if (Integer.parseInt(count_str) < total) {
					page.getList().get(i).setStudyStatus("学习中");
					studying++;
				} else {
					page.getList().get(i).setStudyStatus("已学习");
					haveStudied++;
				}

				int countCredential = Integer.parseInt(credentialService.getCountCredentialRecordByUserIdCurriculumId(
						UserUtils.getUser().getId(), page.getList().get(i).getId()));
				System.out.println("UserUtils.getUser().getId(), page.getList().get(i).getId(): "
						+ UserUtils.getUser().getId() + ", " + page.getList().get(i).getId());
				System.out.println("countCredential: " + countCredential);
				if (countCredential >= 1) {
					System.out.println("证书");
					page.getList().get(i).setCredentialStatus("证书");
					hasCredential++;
				}
				List<Credential> credential_list = credentialService
						.getCredentialIdByCurriculumId(page.getList().get(i).getId());
				if (credential_list.size() > 0) {
					page.getList().get(i).setCredentialId(credential_list.get(0).getId());
				}
			} else {
				page.getList().get(i).setStudyStatus("未学习");
				haventStudied++;
			}
		}
		// studyStatus
		model.addAttribute("haventStudied", haventStudied);
		model.addAttribute("studying", studying);
		model.addAttribute("haveStudied", haveStudied);
		model.addAttribute("hasCredential", hasCredential);

		List<CurrickumClassify> list = ItembankUtils.getCurrickumClassifyList("");
		List<CurrickumClassifyType> currickum_classify_type_num_list = ItembankUtils.getCurrickumClassifyTypeNumMap();
		Map<String, String> currickumClassifyType_map = new HashMap<String, String>();

		for (CurrickumClassifyType item : currickum_classify_type_num_list) {
			currickumClassifyType_map.put(item.getType(), item.getCountType());
			if (item.getCountType() != null && !item.getCountType().equals("")) {
				courseNum += Integer.parseInt(item.getCountType());
			}
		}

		// 课程类型
		model.addAttribute("list", list);
		// 类型数量
		model.addAttribute("currickumClassifyType_map", currickumClassifyType_map);

		String description1 = "";
		String description2 = "";
		String description3 = "";
		if (!typeid.equals("")) {
			for (CurrickumClassify item : list) {
				if (item.getId().equals(typeid)) {
					description1 = item.getDescription1();
					description2 = item.getDescription2();
					description3 = item.getDescription3();
					break;
				}
			}
		}
		if (studyStatus != null && !studyStatus.equals("")) {
			if (studyStatus.equals("haventStudied")) {
				studyStatus = "未学习";
			} else if (studyStatus.equals("studying")) {
				studyStatus = "学习中";
			} else if (studyStatus.equals("haveStudied")) {
				studyStatus = "已学习";
			} else if (studyStatus.equals("hasCredential")) {
				studyStatus = "证书";
			}
			List<Curriculum> curriculum_list = Lists.newArrayList();
			for (int i = 0; i < page.getList().size(); i++) {
				if (page.getList().get(i).getStudyStatus() != null
						&& page.getList().get(i).getStudyStatus().equals(studyStatus)) {
					curriculum_list.add(page.getList().get(i));
				}
				if (page.getList().get(i).getCredentialStatus() != null
						&& page.getList().get(i).getCredentialStatus().equals(studyStatus)) {
					curriculum_list.add(page.getList().get(i));
				}
			}
			page.setList(curriculum_list);
			page = new Page<Curriculum>(pageNo, pageSize, curriculum_list.size(), curriculum_list);
			page.initialize();
		}
		// page
		model.addAttribute("page", page);
		// 课程类别
		model.addAttribute("typeid", typeid);
		// studyStatus
		model.addAttribute("studyStatus", studyStatus);
		model.addAttribute("description1", description1);
		model.addAttribute("description2", description2);
		model.addAttribute("description3", description3);
		// 课程总数
		model.addAttribute("courseNum", courseNum);
		model.addAttribute("courseQueryNum", page.getList().size());

		/*---------------------------------------*/
        /*---------------Attention---------------*/
        /*---------------------------------------*/
		// Modified by HongYang @ 20161126
		map.put("haventStudiedCount", haventStudied);
		map.put("studyingCount", studying);
		map.put("haveStudiedCount", haveStudied);
		map.put("hasCredentialCount", hasCredential);
		map.put("courseNumber", page.getList().size());
		map.put("page", page);
		map.put("PathFtp", "http://202.120.40.69:31171/ftp");
		map.put("test", "test");
		/*---------------------------------------*/
        /*---------------Attention---------------*/
        /*---------------------------------------*/

		if(isMobile){
			//return "modules/infomt/moocCourse/courseList4Mobile";
			return renderString(response, map);
		}
		return "modules/infomt/moocCourse/courseList";
	}

	/**
	 * 课程详情new
	 */
	@RequestMapping(value = "courseDetails")
	public String listCourseDetails(@RequestParam(required = false, defaultValue = "") String topicId,
			HttpServletRequest request, HttpServletResponse response, Model model) {
		Boolean isMobile = UserUtils.getPrincipal().isMobileLogin();
		// Added By Yang HONG
		HashMap<String, Object> map = new HashMap<String, Object>();

		System.out.println("courseDetails isMobile: " + isMobile);
		Curriculum c = curriculumService.get(topicId);

		// 获取获得证书人数并更新数据表
		List list0 = Lists.newArrayList();
		list0 = credentialService.getCredentialIdByCurriculumId(topicId);
		int getcreCount = 0;
		CredentialRecords cr = new CredentialRecords();
		for (int i = 0; i < list0.size(); i++) {
			Credential cl = (Credential) list0.get(i);
			// System.out.println("Credential cl: "+cl.getId());
			cr.setCredentialId(cl.getId());
			getcreCount += credentialRecordsService.getCredentialCount(cr);
		}
		// System.out.println("cre count: "+getcreCount);
		c.setGetcreCount(getcreCount);

		// 获取报名课程人数人数并更新数据表
		Signupcourseinfo s = new Signupcourseinfo();
		s.setCmmtCurriculumId(topicId);
		int signupCount = signupcourseinfoService.signupCount(s);
		c.setSignupCount(signupCount);
		// System.out.println("signup count: "+signupCount);

		curriculumService.update(c);

		Boolean canTakeTest = false;
		if (c.getAnnexFtpFileList() != null) {
			int studyLength = 0;
			for (int i = 0; i < c.getAnnexFtpFileList().size(); i++) {
				CurriculumClassInfo curriculumClassInfo = new CurriculumClassInfo();
				curriculumClassInfo.setStep(
						c.getAnnexFtpFileList().get(i).getFileName() + c.getAnnexFtpFileList().get(i).getFileType());
				curriculumClassInfo.setCmmtCurriculumId(c.getId());
				curriculumClassInfo.setUser(UserUtils.getUser());
				List<CurriculumClassInfo> list = curriculumClassInfoService.findList(curriculumClassInfo);
				if (list != null && list.size() > 0) {
					System.out.println(curriculumClassInfo.getStep() + " " + c.getId());
					c.getAnnexFtpFileList().get(i).setStatus("0");
					studyLength++;
				}
			}
			if (studyLength == c.getAnnexFtpFileList().size()) {
				canTakeTest = true;
			}
			model.addAttribute("allStudyLength", c.getAnnexFtpFileList().size());
			model.addAttribute("studyLength", studyLength);

			/*---------------------------------------*/
            /*---------------Attention---------------*/
            /*---------------------------------------*/
			// Modified by HongYang @ 20161127
			map.put("studyLength", studyLength);
			map.put("annexFtpFileList", c.getAnnexFtpFileList());
            /*---------------------------------------*/
            /*---------------Attention---------------*/
            /*---------------------------------------*/
		}
		model.addAttribute("curriculum", c);
		model.addAttribute("canTakeTest", canTakeTest);

		/*---------------------------------------*/
        /*---------------Attention---------------*/
        /*---------------------------------------*/
		// Modified by HongYang @ 20161127
		map.put("Curriculum", c);
		map.put("canTakeTest", canTakeTest);
		map.put("requirement", "完整学习十讲的学习内容，并于讨论区内至少发布或参与三次主题讨论");
		map.put("evaluation", "暂无");
		map.put("preparation", "初中二年级以上的英语水平");
		map.put("reference", "暂无");
		/*---------------------------------------*/
        /*---------------Attention---------------*/
        /*---------------------------------------*/

		if(isMobile){
			//return "modules/infomt/moocCourse/courseDetails4Mobile";
			return renderString(response, map);
		}
		return "modules/infomt/moocCourse/courseDetails";
	}

	/**
	 * 证书列表
	 */
	@RequestMapping(value = "listCredential")
	public String listCredential(CredentialRecords credentialRecords, HttpServletRequest request,
			HttpServletResponse response, Model model) {
		System.out.println(credentialRecords);
		credentialRecords.setUserB(UserUtils.getUser());
		Page<CredentialRecords> page = credentialRecordsService.findPage(new Page<CredentialRecords>(request, response),
				credentialRecords);
		System.out.println(page.getList());
		if (page.getList().size() > 0) {
			for (int i = 0; i < page.getList().size(); i++) {
				Credential credential = credentialService.get(page.getList().get(i).getCredentialId());
				Curriculum curriculum = curriculumService.get(credential.getCurriculumId());
				List<FtpFile> coverImg = ftpfileService.findList(credential.getCoverimg());
				if (coverImg.size() > 0) {
					model.addAttribute("coverImg", coverImg.get(0));
					page.getList().get(i).setCoverImg(coverImg.get(0));
				}
				page.getList().get(i).setCurriculum(curriculum);
				page.getList().get(i)
						.setCredentialName(credentialService.get(page.getList().get(i).getCredentialId()).getName());
			}
		}
		model.addAttribute("page", page);
		Category category = categoryService.get("300");
		model.addAttribute("category", category);
		if (category == null) {
			Site site = CmsUtils.getSite(Site.defaultSiteId());
			model.addAttribute("site", site);
			return "error/404";
		}
		Site site = siteService.get(category.getSite().getId());
		model.addAttribute("site", site);
		return "modules/infomt/moduleItembank/frontCredential";
	}

	/**
	 * 课程内容详情（播放/浏览）
	 */
	@RequestMapping(value = "view-topic-{categoryId}-{topicId}${urlSuffix}")
	public String viewTopic(@PathVariable String categoryId, @PathVariable String topicId,
			@RequestParam(required = false, defaultValue = "") String typeid, Model model) {

		Category category = categoryService.get(categoryId);
		if (category == null) {
			Site site = CmsUtils.getSite(Site.defaultSiteId());
			model.addAttribute("site", site);
			return "error/404";
		}
		Site site = siteService.get(category.getSite().getId());
		model.addAttribute("site", site);
		model.addAttribute("category", category);
		Curriculum c = curriculumService.get(topicId);
		if (c.getAnnexFtpFileList() != null) {
			for (int i = 0; i < c.getAnnexFtpFileList().size(); i++) {
				CurriculumClassInfo curriculumClassInfo = new CurriculumClassInfo();
				curriculumClassInfo.setStep(
						c.getAnnexFtpFileList().get(i).getFileName() + c.getAnnexFtpFileList().get(i).getFileType());
				curriculumClassInfo.setCmmtCurriculumId(c.getId());
				curriculumClassInfo.setUser(UserUtils.getUser());
				List<CurriculumClassInfo> list = curriculumClassInfoService.findList(curriculumClassInfo);
				if (list != null && list.size() > 0) {
					System.out.println(curriculumClassInfo.getStep() + " " + c.getId());
					c.getAnnexFtpFileList().get(i).setStatus("0");
				}
			}
		}

		model.addAttribute("curriculum", c);
		List<CurrickumClassify> list = ItembankUtils.getCurrickumClassifyList("");
		Map map = paperService.getInFoTopicMap();
		model.addAttribute("map", map);
		model.addAttribute("list", list);
		model.addAttribute("typeid", typeid);
		return "modules/infomt/moduleItembank/courseDetail";
		// return "modules/infomt/moduleItembank/frontTopicDetail";
	}

	/**
	 * 课程下的试卷列表
	 */
	@SuppressWarnings("unchecked")
	@RequestMapping(value = "view-paper-{categoryId}-{topicId}${urlSuffix}")
	public String viewPaper(@PathVariable String categoryId, @PathVariable String topicId,
			@RequestParam(required = false, defaultValue = "") String typeid,
			@RequestParam(required = false, defaultValue = "1") Integer pageNo,
			@RequestParam(required = false, defaultValue = "5") Integer pageSize, HttpServletRequest request,
			Model model) {
		Boolean isMobile = UserUtils.getPrincipal().isMobileLogin();

		Category category = categoryService.get(categoryId);
		if (category == null) {
			Site site = CmsUtils.getSite(Site.defaultSiteId());
			model.addAttribute("site", site);
			return "error/404";
		}
		Site site = siteService.get(category.getSite().getId());
		model.addAttribute("site", site);
		model.addAttribute("category", category);
		// Map<String, Object> map =
		// paperRecordService.getPLMap2(paperRecordService.findList(new
		// PaperRecord()));
		Paper paper = new Paper();
		paper.setTopicid(topicId);
		paper.setIssued("1");
		Page<Paper> page = paperService.findPage(new Page<Paper>(pageNo, pageSize), paper);
		List<PaperRecord> paperRecord_list = paperRecordService
				.getPaperRecordsByUserIdCurriculumId(UserUtils.getUser().getId(), topicId);
		Map<String, PaperRecord> paperRecord_map = new HashMap<String, PaperRecord>();
		Float scoreLineA = Float.parseFloat(Global.getConfig("eduTrain.scoreLineA"));
		Float scoreLineB = Float.parseFloat(Global.getConfig("eduTrain.scoreLineB"));
		for (int i = 0; i < paperRecord_list.size(); i++) {
			if (paperRecord_list.get(i).getScore() != null && !paperRecord_list.get(i).getScore().equals("")) {
				Float a = Float.parseFloat(paperRecord_list.get(i).getScore().split("/")[0]);
				Float b = Float.parseFloat(paperRecord_list.get(i).getScore().split("/")[1]);
				if ((a / b) > scoreLineA) {
					paperRecord_list.get(i).setScore_description("A");
				} else if ((a / b) > scoreLineB) {
					paperRecord_list.get(i).setScore_description("B");
				} else {
					paperRecord_list.get(i).setScore_description("C");
				}
				paperRecord_list.get(i).setScore(("" + (a / b) * 100).split("\\.")[0]);
			} else {
				paperRecord_list.get(i).setScore_description("C");
			}
			paperRecord_map.put(paperRecord_list.get(i).getPaperid(), paperRecord_list.get(i));
		}
		// System.out.println("paperRecord_list: " + paperRecord_list);
		// List<CurrickumClassify> list =
		// ItembankUtils.getCurrickumClassifyList("");
		// model.addAttribute("list", list);
		model.addAttribute("paperRecord_map", paperRecord_map);
		// model.addAttribute("typeid", typeid);
		// model.addAttribute("topicId", topicId);
		model.addAttribute("page", page);
		// model.addAttribute("map", map);
		// model.addAttribute("user", UserUtils.getUser());
		// model.addAttribute("pageNumber", pageNo);
		if(isMobile){
			return "modules/infomt/moduleItembank/frontPaperRecordList4Mobile";
		}
		return "modules/infomt/moduleItembank/frontPaperRecordList";
		// return "modules/infomt/moduleItembank/frontPaper";
	}

	@RequestMapping(value = "viewUserPaperRecord")
	public String viewUserPaperRecord(@RequestParam(required = false, defaultValue = "") String paperRecordId,
			HttpServletRequest request, HttpServletResponse response, Model model) {
		PaperRecord p = paperRecordService.get(paperRecordId);
		PaperRecord paperRecord = paperRecordService.findPaperRecord(p);
		Paper paper = paperService.get(paperRecord.getPaperid());
		List<Exam> exlist = examService.getExamByIds(paper.getExamids());
		model.addAttribute("paperRecord", paperRecord);
		model.addAttribute("exlist", exlist);
		model.addAttribute("paper", paper);
		return "modules/infomt/moduleItembank/viewUserPaperRecord";
	}

	/**
	 * 在线考试
	 */
	@SuppressWarnings("unchecked")
	@RequestMapping(value = "view-paperRecordForm-{categoryId}-{paperid}${urlSuffix}")
	public String viewPaperRecordFrom(@PathVariable String categoryId, @PathVariable String paperid,
			@RequestParam(required = false, defaultValue = "") String typeid, HttpServletRequest request,
			HttpServletResponse response, Model model) {
		Boolean isMobile = UserUtils.getPrincipal().isMobileLogin();
		// isMobile = true;
		HashMap<String, Object> m = new HashMap<String, Object>();
		Category category = categoryService.get(categoryId);
		if (category == null) {
			Site site = CmsUtils.getSite(Site.defaultSiteId());
			model.addAttribute("site", site);
			if (isMobile) {
				m.put("site", site);
				return renderString(response, m);
			}
			return "error/404";
		}
		Site site = siteService.get(category.getSite().getId());
		model.addAttribute("site", site);
		model.addAttribute("category", category);
		if (isMobile) {
			m.put("site", site);
			m.put("category", category);
		}
		Paper paper = paperService.get(paperid);
		List<Exam> exlist = examService.getExamByIds(paper.getExamids());
		PaperRecord paperRecord = new PaperRecord();

		PaperRecord p = new PaperRecord();
		// FontUser fontUser = (FontUser)SessionUtil.getSession(request,
		// SessionUtil.FONT_USER);
		User user = UserUtils.getUser();
		Map<String, Object> map;
		if (user != null) {
			p.setUserid(user.getId());
			map = paperRecordService.getMap(p);
			if (map.get(paperid) != null) {
				p.setPaperid(paperid);
				paperRecord = paperRecordService.findPaperRecord(p);
			} else {
				paperRecord.setPaperid(paperid);
			}
		} else {
			map = paperRecordService
					.getPLMap((List<PaperRecord>) SessionUtil.getSession(request, SessionUtil.PAPERLIST));
			if (map.get(paperid) != null) {
				paperRecord = (PaperRecord) map.get(paperid);
			} else {
				paperRecord.setPaperid(paperid);
			}
		}
		//单选多选分数
		model.addAttribute("singleScore", Global.getConfig("eduTrain.singleScore"));
		model.addAttribute("multiScore", Global.getConfig("eduTrain.multiScore"));

		model.addAttribute("user", user);
		model.addAttribute("map", map);

		model.addAttribute("exlist", exlist);
		System.out.println("exlist.length: " + exlist.size());
		System.out.println("exlist: " + exlist);
		model.addAttribute("paper", paper);
		List<CurrickumClassify> list = ItembankUtils.getCurrickumClassifyList("");
		model.addAttribute("list", list);
		model.addAttribute("typeid", typeid);

		// 工作流开始部分，向校长发送待办任务

		PaperRecord q_data = new PaperRecord();
		q_data.setPaperid(paperid);
		q_data.setUserid(user.getId());
		PaperRecord newOrOldPaperRecord = getNewOrOldPaperRecord(q_data);
		m.put("newOrOldPaperRecord", newOrOldPaperRecord);
		paperRecord.setId(newOrOldPaperRecord.getId());
		model.addAttribute("paperRecord", paperRecord);

//		// 工作流开始部分，向校长发送待办任务
//		if ((paper.getNeedSchoolmaster() != null && paper.getNeedSchoolmaster().equals("TRUE"))
//				&& (newOrOldPaperRecord.getCompleteAct() == null || !newOrOldPaperRecord.getCompleteAct().equals("true"))) {
//			if (paperRecord.getProcInsId() != null && !paperRecord.getProcInsId().equals("")) {
//				actProcessService.deleteProcIns(paperRecord.getProcInsId(), null);
//			}
//			Map<String, Object> vars = new HashMap<String, Object>();
//			String title = "监考:" + paper.getName();
//			vars.put("monitorGroup", ActUtils.P_TRANS_SUPERIOR_LEADER);
//			actTaskService.startProcess(ActUtils.PD_MONITOR_EXAMINATION[0], ActUtils.PD_MONITOR_EXAMINATION[1],
//					newOrOldPaperRecord.getId(), title, vars);
//		}

		if (isMobile) {
			m.put("user", user);
			m.put("map", map);
			m.put("paperRecord", paperRecord);
			m.put("exlist", exlist);
			m.put("paper", paper);
			m.put("list", list);
			m.put("typeid", typeid);
			m.put("singleScore", Global.getConfig("eduTrain.singleScore"));
			m.put("multiScore", Global.getConfig("eduTrain.multiScore"));
			return renderString(response, m);
		}
		return "modules/infomt/moduleItembank/frontPaperRecordForm";
	}

	public PaperRecord getNewOrOldPaperRecord(PaperRecord q_data) {
		List<PaperRecord> q_list = paperRecordService.findList(q_data);
		if (q_list != null && q_list.size() > 0) {
			// 参加了考试
			// 检查考试是否完成
			if (q_list.size() == 1 && q_list.get(0).getCompleteAct().equals("true")) {
				return q_list.get(0);
			} else {
				for (PaperRecord item : q_list) {
					if (item.getCompleteAct() == null || !item.getCompleteAct().equals("true")) {
						// 删除对应的工作流代办任务
						if (item.getProcInsId() != null && !item.getProcInsId().equals("")) {
							actProcessService.deleteProcIns(item.getProcInsId(), null);
						}
						paperRecordService.delete(item);
					}
				}
				return getNewOrOldPaperRecord(q_data);
			}
		} else {
			// 没有参加考试
			PaperRecord newPaperRecord = new PaperRecord();
			newPaperRecord.setPaperid(q_data.getPaperid());
			newPaperRecord.setUserid(q_data.getUserid());
			newPaperRecord.setBatchIdSchoolmaster("");
			newPaperRecord.setBatchIdUser("");
			newPaperRecord.setCompleteAct("false");
			paperRecordService.save(newPaperRecord);
			return newPaperRecord;
		}
	}

	// 取消考试接口
	@RequestMapping(value = "cancelExam")
	public String cancelExam(PaperRecord paperRecord, HttpServletRequest request, HttpServletResponse response,
			Model model) {
		paperRecord = paperRecordService.get(paperRecord.getId());
		// 删除未考试的paperRecord
		paperRecordService.delete(paperRecord);
		// 删除工作流对应的流程
		if (paperRecord.getAct() != null && paperRecord.getProcInsId() != null
				&& !paperRecord.getProcInsId().equals("")) {
			actProcessService.deleteProcIns(paperRecord.getProcInsId(), null);
		}
		if (UserUtils.getPrincipal().isMobileLogin()) {
			return renderMacsString(response, ResponseJson.Builder().status(0));
		} else {
			paperRecord = paperRecordService.get(paperRecord.getId());
			return "redirect:" + Global.getAdminPath() + "/infomt/view-paper-300-"
					+ paperService.get(paperRecord.getPaperid()).getTopicid() + ".html";
		}
	}

	// 校长办理接口
	@RequestMapping(value = "schoolMasterDoIt")
	public String schoolMasterDoIt(PaperRecord paperRecord, HttpServletRequest request, HttpServletResponse response,
			Model model) {
		HashMap<String, Object> m = new HashMap<String, Object>();
		Act act = paperRecord.getAct();
		paperRecord = paperRecordService.get(paperRecord.getId());
		paperRecord.setAct(act);
		Paper paper = paperService.get(paperRecord.getPaperid());
		m.put("paper", paper);
		m.put("paperRecord", paperRecord);
		return renderString(response, m);
	}

	// 校长监考照片保存
	@RequestMapping(value = "saveSchoolMasterBatchId")
	public String saveSchoolMasterBatchId(PaperRecord paperRecord, HttpServletRequest request,
			HttpServletResponse response, Model model) {
		if (paperRecord.getId() != null && !paperRecord.getId().equals("")) {
			PaperRecord tmp = paperRecordService.get(paperRecord.getId());
			tmp.setBatchIdSchoolmaster(paperRecord.getBatchIdSchoolmaster());

			Act a = paperRecord.getAct();

			paperRecord = tmp;

			paperRecord.setAct(a);
			System.out.println("setSchoolmaster" + UserUtils.getUser().getId());
			paperRecord.setSchoolmaster(UserUtils.getUser().getId());
			paperRecord.setIsNewRecord(false);
		}
		paperRecordService.save(paperRecord);

		// 完成上传监考图片任务
		if (paperRecord.getAct() != null && paperRecord.getProcInsId() != null
				&& paperRecord.getAct().getTaskId() != null && !paperRecord.getAct().getTaskId().equals("")) {
			PaperRecord tmp = paperRecordService.get(paperRecord.getId());
			if (tmp.getCompleteAct().equals("true")) {
				return renderMacsString(response, ResponseJson.Builder().status(1));
			}
			actTaskService.complete(paperRecord.getAct().getTaskId(), paperRecord.getProcInsId(), null, null);
		}
		return renderMacsString(response, ResponseJson.Builder().status(0));
	}

	// 用户是否能获得此证书
	public String getScoreByUserIdCredentialId(String user_id, String credential_id) {
		List<PaperRecord> paperRecord_list = credentialService.getPaperRecordListByCredentialIdUserId(credential_id,
				user_id);
		System.out.println("paperRecord_list: " + paperRecord_list);
		List<Paper> paper_list = credentialService.getPaperListByCredentialId(credential_id);
		System.out.println("paper_list: " + paper_list);
		for (Paper paper : paper_list) {
			boolean flag = false;
			for (PaperRecord paperRecord : paperRecord_list) {
				if (paper.getId().equals(paperRecord.getPaperid())) {
					flag = true;
					break;
				}
			}
			if (flag == false) {
				System.out.println("C");
				return "C";
			}
		}
		
		//假设ab证书都可以获得
		boolean scoreA_flag = true;
		boolean scoreB_flag = true;
		Float scoreLineA = Float.parseFloat(Global.getConfig("eduTrain.scoreLineA"));
		Float scoreLineB = Float.parseFloat(Global.getConfig("eduTrain.scoreLineB"));
		for (PaperRecord paperRecord : paperRecord_list) {
			if(paperRecord == null || paperRecord.getScore() == null || paperRecord.equals("")){
				scoreA_flag = false;
				scoreB_flag = false;
			}else {
				System.out.println(paperRecord.getScore());
				// System.out.println("userid: " + user_id + "; paperRecord score: "
				// + paperRecord.getScore().replaceAll(" ", "").split("/"));
				Float a = Float.parseFloat(paperRecord.getScore().replaceAll("\\s", "").split("/")[0]);
				Float b = Float.parseFloat(paperRecord.getScore().replaceAll("\\s", "").split("/")[1]);
				if ((a / b) > scoreLineB) {
					if ((a / b) < scoreLineA) {
						scoreA_flag = false;
					}
				} else {
					scoreA_flag = false;
					scoreB_flag = false;
					break;
				}
			}
		}
		
		//获得a
		if(scoreA_flag){
			System.out.println("A");
			return "A";
		}
		//获得b
		if (scoreB_flag) {
			System.out.println("B");
			return "B";
		}
		System.out.println("C");
		return "C";
	}

	/**
	 * 保存考试记录
	 */
	@SuppressWarnings("unchecked")
	@RequestMapping(value = "save-paperRecordForm-{categoryId}-{paperid}${urlSuffix}")
	public String savePaperRecord(@PathVariable String categoryId, PaperRecord paperRecord,
			@RequestParam(required = false, defaultValue = "") String typeid, HttpServletRequest request, Model model) {
		// FontUser fontUser = (FontUser)SessionUtil.getSession(request,
		// SessionUtil.FONT_USER);
		System.out.println("---savePaperForm");
		System.out.println(paperRecord);
		User user = UserUtils.getUser();
		if (user != null) {
			paperRecord.setUserid(user.getId());
			if (paperRecord.getId() != null && !paperRecord.getId().equals("")) {
				PaperRecord tmp = paperRecordService.get(paperRecord.getId());
				paperRecord.setBatchIdSchoolmaster(tmp.getBatchIdSchoolmaster());
				paperRecord.setSchoolmaster(tmp.getSchoolmaster());
				paperRecord.setCompleteAct("true");
				paperRecord.setIsNewRecord(false);
				paperRecordService.save(paperRecord);

				// 考试已经完成，判断监考人员是否完成上传监考图片的任务，如没有，自动完成
				if (tmp.getProcInsId() != null && !tmp.getProcInsId().equals("")) {
					List<Act> tmpTasks = actTaskService.getTasksByProcInsId(tmp.getProcInsId(), null, null);
					if (tmpTasks.size() != 0) {
						Act tmpTask = tmpTasks.get(0);
						if (tmpTask.getAssignee() != null && !tmpTask.getAssignee().equals("")) {
							actTaskService.unclaim(tmpTask.getTaskId());
						}
						actTaskService.complete(tmpTask.getTaskId(), tmp.getProcInsId(), null, null);
					}
				}
			}
		} else {
			List<PaperRecord> list = (List<PaperRecord>) SessionUtil.getSession(request, SessionUtil.PAPERLIST);
			if (list == null) {
				list = Lists.newArrayList();
			}
			list.add(paperRecord);
			SessionUtil.setSession(request, SessionUtil.PAPERLIST, list);
		}

		String paperid = paperRecord.getPaperid();
		Paper paper = paperService.get(paperid);
		String topicId = "";
		if (paper != null) {
			topicId = paper.getTopicid();
		}

		// 判断用户能否获得证书
		List<Credential> credential_list = credentialService.getCredentialIdByPaperId(paperid);
		System.out.println(credential_list);
		if (credential_list != null && credential_list.size() > 0) {
			for (Credential credential : credential_list) {

				String score = getScoreByUserIdCredentialId(user.getId(), credential.getId());
				CredentialRecords credentialRecords = new CredentialRecords();
				credentialRecords.setCredentialId(credential.getId());
				credentialRecords.setUserA(UserUtils.get("1"));
				credentialRecords.setUserB(user);
				if (score.equals("A")) {
					credentialRecords.setRemarks("A级证书");
					System.out.println("获得A级证书");
					credentialRecordsService.save(credentialRecords);
				} else if (score.equals("B")) {
					credentialRecords.setRemarks("B级证书");
					System.out.println("获得B级证书");
					credentialRecordsService.save(credentialRecords);
				} else {
					System.out.println("并不能获得证书");
				}
			}
		}

		return viewPaper(categoryId, topicId, typeid, 1, 5, request, model);
	}

	/**
	 * 工作流节点调转控制
	 * 
	 * @param paperRecord
	 * @param model
	 * @return
	 */
	@RequestMapping(value = "form")
	public String form(PaperRecord paperRecord, Model model) {

		StringBuilder formUrl = new StringBuilder();
		formUrl.append(Global.getAdminPath() + "/infomt");

		Act act = paperRecord.getAct();
		act.setBusinessId(paperRecord.getId());
		paperRecord = paperRecordService.get(paperRecord.getId());

		String controllerUrl = "/";

		if (StringUtils.isNotBlank(paperRecord.getId())) {// .getAct().getProcInsId())){

			// 环节编号
			String taskDefKey = act.getTaskDefKey();

			// 查看监考任务详情
			if (act.isFinishTask()) {
				controllerUrl = "/";
			}
			// 监考，上传监考图片
			else if ("monitor".equals(taskDefKey)) {
				controllerUrl = "/schoolMasterDoIt";
			}
		}

		formUrl.append(controllerUrl).append("?");
		String para = ActUtils.actToUrl(act);
		System.out.println(para);
		formUrl.append(para);
		Boolean isMobile=UserUtils.getPrincipal().isMobileLogin();
		if (isMobile){
			return "redirect:" + formUrl.toString()+"&mobileLogin=true";
		}
		return "redirect:" + formUrl.toString();
	}
}
